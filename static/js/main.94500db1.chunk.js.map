{"version":3,"sources":["components/QuizForm.js","components/Question.js","components/QuizQuestions.js","components/Result.js","components/Results.js","App.js","index.js"],"names":["QuizForm","handleSubmit","this","props","handleChange","state","react_default","a","createElement","className","concat","formCompleted","onSubmit","htmlFor","type","name","min","max","value","amount","onChange","required","category","difficulty","Component","Question","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","event","target","setState","defineProperty","questionNum","questionID","optionValue","document","querySelector","correctAnswer","_this$props","addCorrectAttempts","options","_this$props$question","question","incorrect_answers","correct_answer","toConsumableArray","forEach","option","replace","shuffle","array","currentIndex","length","randomIndex","Math","floor","random","_ref","_this$props$question2","onClick","QuizQuestions","bool","id","ids","attempts","attempt","urlString","keyValuesConstruct","fetch","response","json","response_code","results","questions","toggleLoading","_this$state","captureResults","string","_this$props$state","insufficientQs","includes","_this2","_this$props$state2","loading","handleAnswerSubmit","map","index","components_Question","key","Result","result","resultID","style","fontSize","display","paddingRight","Results","correctAnswers","nextProps","onPropsChange","tempNum","message","createMessage","components_Result","resetState","App","preventDefault","setTimeout","quizSubmitted","attemptIDs","baseState","dist_default","bgColor","spinnerColor","textColor","text","children","components_QuizForm","components_QuizQuestions","components_Results","ReactDOM","render","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.94500db1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass QuizForm extends Component {\r\n    render() {\r\n        const handleSubmit = this.props.handleSubmit;\r\n        const handleChange = this.props.handleChange;\r\n        const state = this.props.state;\r\n        return(\r\n            <div className = {`QuizForm container bg-white p-4 mt-5 rounded ${state.formCompleted ? 'form-hidden' : 'form-shown'}`}>\r\n                <form onSubmit ={handleSubmit}>\r\n                    <h1 className = \"h3 text-muted text-center\">Fill this form to play our Quiz</h1>\r\n                    <hr/>\r\n                    <div className=\"form-group mt-5\">\r\n                        <label htmlFor=\"amount\" className =\"pr-5\">Number of Questions</label>\r\n                        <input \r\n                        type = \"number\" \r\n                        name = \"amount\"\r\n                        min =\"5\"\r\n                        max =\"50\"\r\n                        value = {state.amount}\r\n                        onChange = {handleChange}\r\n                        className = \"input-field\"\r\n                        required\r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group mt-5\">\r\n                        <label htmlFor=\"category\">Category</label>\r\n                        <select \r\n                        className=\"form-control input-field\"\r\n                        value = {state.category}\r\n                        onChange = {handleChange}\r\n                        name =\"category\"\r\n                        >\r\n                            <option value=\"any\">Any Category</option>\r\n                            <option value=\"9\">General Knowledge</option>\r\n                            <option value=\"10\">Entertainment: Books</option>\r\n                            <option value=\"11\">Entertainment: Film</option>\r\n                            <option value=\"12\">Entertainment: Music</option>\r\n                            <option value=\"13\">Entertainment: Musicals &amp; Theatres</option>\r\n                            <option value=\"14\">Entertainment: Television</option>\r\n                            <option value=\"15\">Entertainment: Video Games</option>\r\n                            <option value=\"16\">Entertainment: Board Games</option>\r\n                            <option value=\"17\">Science &amp; Nature</option>\r\n                            <option value=\"18\">Science: Computers</option>\r\n                            <option value=\"19\">Science: Mathematics</option>\r\n                            <option value=\"20\">Mythology</option>\r\n                            <option value=\"21\">Sports</option>\r\n                            <option value=\"22\">Geography</option>\r\n                            <option value=\"23\">History</option>\r\n                            <option value=\"24\">Politics</option>\r\n                            <option value=\"25\">Art</option>\r\n                            <option value=\"26\">Celebrities</option>\r\n                            <option value=\"27\">Animals</option>\r\n                            <option value=\"28\">Vehicles</option>\r\n                            <option value=\"29\">Entertainment: Comics</option>\r\n                            <option value=\"30\">Science: Gadgets</option>\r\n                            <option value=\"31\">Entertainment: Japanese Anime &amp; Manga</option>\r\n                            <option value=\"32\">Entertainment: Cartoon &amp; Animations</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group mt-5\">\r\n                        <label htmlFor=\"difficulty\">Difficulty</label>\r\n                        <select \r\n                        className=\"form-control input-field\"\r\n                        value = {state.difficulty}\r\n                        onChange = {handleChange}\r\n                        name =\"difficulty\"\r\n                        >\r\n                            <option value = \"any\">Any</option>\r\n                            <option value=\"easy\">Easy</option>\r\n                            <option value=\"medium\">Medium</option>\r\n                            <option value=\"hard\">Hard</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"form-group mt-5\">\r\n                        <label htmlFor=\"type\">Type of Questions</label>\r\n                        <select \r\n                            className=\"form-control input-field\"\r\n                            value = {state.type}\r\n                            onChange = {handleChange}\r\n                            name =\"type\"\r\n                            >\r\n                            <option value = \"any\">Any</option>\r\n                            <option value=\"multiple\">Multiple Choice</option>\r\n                            <option value=\"boolean\">True/False</option>\r\n                            </select>\r\n                    </div>\r\n                    <button type =\"submit\" className = \"btn btn-secondary submit-button mt-3\">Submit</button>\r\n                    </form>\r\n            </div>\r\n        )\r\n    }  \r\n}\r\n\r\nexport default QuizForm;","import React, { Component } from 'react';\r\nimport '../App.css';\r\n\r\nclass Question extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n           correctAnswer: '',\r\n           options: []\r\n          };\r\n    }\r\n\r\n    componentDidMount(){     \r\n        const {incorrect_answers, correct_answer} =  this.props.question;\r\n        let options = [correct_answer, ...incorrect_answers]\r\n        options.forEach((option)=>{\r\n            option.replace(/(&quot;)/g,'\"').replace(/(&#039;)/g, \"'\")\r\n        })\r\n        this.setState({\r\n            options: this.shuffle(options)\r\n        })\r\n        this.setState({correctAnswer: this.props.question.correct_answer})\r\n    }\r\n\r\n    shuffle(array) {\r\n        let currentIndex = array.length;\r\n        // While there remain elements to shuffle...\r\n        while (0 !== currentIndex) {\r\n      \r\n          // Pick a remaining element...\r\n          let randomIndex = Math.floor(Math.random() * currentIndex);\r\n          currentIndex -= 1;\r\n          [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\r\n        }\r\n      \r\n        return array;\r\n      }\r\n      \r\n\r\n    handleClick = (event) => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        \r\n        this.setState({\r\n          [name]: value\r\n        });\r\n        const questionNum = `question${this.props.questionID}`\r\n        const optionValue = document.querySelector(`input[name = ${questionNum}]:checked`).value;\r\n        const {correctAnswer} = this.state;\r\n        const {addCorrectAttempts, questionID} = this.props;\r\n        if(optionValue===correctAnswer){\r\n            addCorrectAttempts(optionValue, correctAnswer,  1, questionID)\r\n        } else{\r\n            addCorrectAttempts(optionValue, correctAnswer, 0, questionID)\r\n        }\r\n      }\r\n\r\n    render(){\r\n        const {question, type} =  this.props.question;\r\n        const {questionID} = this.props;\r\n        return(\r\n            <div className = \"Question\">\r\n               <p>Question {questionID+1}: &nbsp; {question.replace(/(&quot;)/g,'\"').replace(/(&#039;)/g, \"'\")}</p>\r\n               {type==='boolean' ?(\r\n                <div>\r\n                    <div className=\"radio-inline\">\r\n                        <label>\r\n                            <input type=\"radio\" name={`question${questionID}`} \r\n                            onClick ={this.handleClick} \r\n                            value ='False'/>False\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"radio-inline\">\r\n                        <label>\r\n                            <input type=\"radio\" name={`question${questionID}`} \r\n                            onClick ={this.handleClick} \r\n                            value ='True'/>True\r\n                        </label>\r\n                    </div>\r\n                    <hr></hr>\r\n                </div>\r\n               ):(\r\n                <div>               \r\n                    <div className=\"radio-inline\">\r\n                        <label>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name={`question${questionID}`} \r\n                                onClick ={this.handleClick} \r\n                                value ={this.state.options[0]}\r\n                            />\r\n                                {this.state.options[0]}\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"radio-inline\">\r\n                        <label>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name={`question${questionID}`}\r\n                                onClick ={this.handleClick}\r\n                                value ={this.state.options[1]} \r\n                            />\r\n                                {this.state.options[1]}\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"radio-inline\">\r\n                        <label>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name={`question${questionID}`}\r\n                                onClick ={this.handleClick}\r\n                                value ={this.state.options[2]} \r\n                            />\r\n                            {this.state.options[2]}\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"radio-inline\">\r\n                        <label>\r\n                            <input \r\n                                type=\"radio\" \r\n                                name={`question${questionID}`}\r\n                                onClick ={this.handleClick} \r\n                                value ={this.state.options[3]}/>{this.state.options[3]}\r\n                        </label>\r\n                    </div>             \r\n                    <hr></hr>\r\n                </div>\r\n               )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Question;","import React, { Component } from 'react';\r\nimport Question from './Question';\r\nimport '../App.css';\r\n\r\nclass QuizQuestions extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n           ids : [],\r\n           attempts: [],\r\n          };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const urlString = this.keyValuesConstruct()\r\n        const {amount} = this.props.state;\r\n        const response = await fetch(`https://opentdb.com/api.php?amount=${amount}${urlString}`);\r\n        if(response){\r\n            const json = await response.json();\r\n            if (json.response_code===0){\r\n                this.questions = await json.results\r\n            }\r\n        }    \r\n        this.props.toggleLoading();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        const {attempts, ids} = this.state;\r\n        this.props.captureResults(attempts, ids);\r\n    }\r\n\r\n    addCorrectAttempts = (optionValue, correctAnswer,  bool, id)=>{\r\n        if (!(id in this.state.ids)){\r\n            this.setState({\r\n                ids: [...this.state.ids, id]\r\n            })\r\n            this.setState({\r\n                attempts:[\r\n                    ...this.state.attempts,\r\n                    {\r\n                        optionValue,\r\n                        correctAnswer,\r\n                        id,\r\n                        bool\r\n                    }\r\n                ]\r\n            })\r\n        } else{\r\n            let attempts = this.state.attempts;\r\n            attempts.forEach((attempt)=>{\r\n                if (attempt.id=== id){\r\n                    attempt.optionValue = optionValue;\r\n                    attempt.bool = bool\r\n                }\r\n            })\r\n            this.setState({\r\n                attempts:attempts\r\n            })\r\n        }\r\n    }\r\n\r\n    keyValuesConstruct(){\r\n        let string = ''\r\n        const {category, difficulty, type} = this.props.state;\r\n        const insufficientQs = ['13', '19', '24', '25', '27', '29', '30']\r\n        if(category!== 'any'){\r\n            string+= `&category=${category}`\r\n        }\r\n        if(difficulty!== 'any' && !(insufficientQs.includes(category))){\r\n            string+= `&difficulty=${difficulty}`\r\n        }\r\n        if(type!== 'any' && !(insufficientQs.includes(category))){\r\n            string+= `&type=${type}`\r\n        }\r\n        return string\r\n    }  \r\n\r\n    render() {\r\n        const {type, difficulty, loading} = this.props.state;\r\n        return(\r\n            <div className = \"QuizQuestions\">\r\n                {!loading &&\r\n                    <form onSubmit = {this.props.handleAnswerSubmit} className = \"answer-container bg-white p-4 mt-5 rounded\">\r\n                        <h1 className = \"h3 text-muted text-center quiz-heading\">{type} choice type Quiz ({difficulty} Difficulty)</h1>\r\n                        <hr/>\r\n                        {this.questions?(\r\n                            this.questions.map((question, index)=>(\r\n                                <Question \r\n                                    question = {question} \r\n                                    key ={index} \r\n                                    questionID = {index} \r\n                                    addCorrectAttempts = {this.addCorrectAttempts}\r\n                                />\r\n                                ))\r\n                        ):(\r\n                            <p>Sorry!! We found insufficient results for your query.\r\n                                Try lowering number of questions or set the category and difficulty to 'Any'\r\n                            </p>\r\n                        )}\r\n                        <button type =\"submit\" className = \"btn btn-secondary submit-button mt-3\">Submit</button>\r\n                    </form>\r\n                    \r\n                }\r\n           </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default QuizQuestions;","import React, { Component } from 'react';\r\n\r\nimport '../App.css';\r\n\r\nclass Result extends Component {\r\n    render(){\r\n        const {result, resultID} = this.props; \r\n        return(\r\n            <div className = \"Result\" style = {question}>\r\n                {result.bool===1 ?(\r\n                    <div>\r\n                        <p>Question: {resultID+1} Right (Answer: {result.correctAnswer})</p>\r\n                    </div>\r\n                ):(\r\n                    <div>\r\n                        <p>Question: {resultID+1} Wrong \r\n                        (Right Answer: {result.correctAnswer}, You gave: {result.optionValue})\r\n                        </p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst question  = {\r\n    fontSize: '14px',\r\n    display: 'inline-block',\r\n    paddingRight: '2em'\r\n}\r\n\r\nexport default Result;","import React, { Component } from 'react';\r\nimport Result from './Result';\r\n\r\nimport '../App.css';\r\n\r\nclass Results extends Component {\r\n    state = {\r\n        correctAnswers: 0,\r\n    }\r\n    componentDidMount(){\r\n        const {toggleLoading} = this.props;\r\n        toggleLoading();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.onPropsChange(nextProps);\r\n    }\r\n\r\n    onPropsChange(props){\r\n        const {results} = props.state;\r\n        \r\n        let tempNum = 0\r\n        results.forEach((result)=>{\r\n            if(result.bool===1){\r\n                tempNum+=1;\r\n            }\r\n        })\r\n        this.setState({\r\n            correctAnswers: tempNum\r\n        })\r\n    }\r\n\r\n    createMessage(){\r\n        const {amount} = this.props.state\r\n        let message = '';\r\n        if(this.state.correctAnswers/amount===1){\r\n            message = 'Congratulations, you got everything right'\r\n        } else if (this.state.correctAnswers/amount>0.7){\r\n            message = `Great Performance, you got \r\n                ${this.state.correctAnswers} right out of ${amount}`\r\n        } else if (this.state.correctAnswers/amount>0.4){\r\n            message =  `Good Performance, you got \r\n            ${this.state.correctAnswers} right out of ${amount}`\r\n        } else {\r\n            message = `Horrible Performance, you got \r\n            ${this.state.correctAnswers} right out of ${amount}`\r\n        }\r\n        return message\r\n    }\r\n\r\n    render() {\r\n        const{loading, results} = this.props.state;\r\n        const message = this.createMessage();\r\n        return(\r\n            <div className = \"Results answer-container bg-white p-4 mt-5 mb-5 rounded\">\r\n                {!loading &&\r\n                    <div>\r\n                        <h1 className = \"h3 text-muted text-center quiz-heading\">Results of your Quiz</h1>   \r\n                        <p className = \"text-center p-5 mb-5 bg-dark text-white \">{message}</p>\r\n                        <div className = \"text-muted\">\r\n                                Attempted Questions\r\n                        </div>\r\n                        {results.map((result, index)=>(\r\n                            <Result \r\n                                result = {result} \r\n                                key = {index} \r\n                                resultID = {result.id}\r\n                            />\r\n                            ))\r\n                        }\r\n                        <button className = \"btn btn-warning d-block text-white\" onClick = {this.props.resetState}>Play Again</button>         \r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Results;","import React, { Component } from 'react';\nimport QuizForm from './components/QuizForm';\nimport QuizQuestions from './components/QuizQuestions';\nimport LoadingScreen from 'react-loading-screen';\nimport Results from './components/Results';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        amount: 10,\n        category: 'any',\n        difficulty: 'easy',\n        type: 'multiple',\n        formCompleted: false,\n        quizSubmitted: false,\n        loading: false,\n        results: [],\n        attemptIDs: []\n      };\n      this.baseState = this.state\n      //Alternative for not using fat arrow \n      //functions is to bind this value of the current scope with the function\n      // this.handleChange = this.handleChange.bind(this);\n      // this.handleSubmit = this.handleSubmit.bind(this);\n\n    }\n\n  handleChange= (event) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit = (event)=> {\n    event.preventDefault();\n      this.setState({\n        formCompleted: true,\n        loading: true\n      })\n  }\n\n  handleAnswerSubmit= (event)=>{\n    event.preventDefault();\n    this.toggleLoading();\n    setTimeout(()=>{\n      this.setState({\n        quizSubmitted:true\n      })\n    }, 1000)\n  }\n\n  captureResults= (attempts, attemptIDs)=>{\n    this.setState({\n      results: attempts,\n      attemptIDs\n    })\n  }\n\n\n  toggleLoading = () =>{\n    this.setState({\n      loading: !this.state.loading\n    })\n  }\n\n  resetState = () => {\n    this.setState(this.baseState);\n  }\n\n  render() {\n    const {formCompleted, quizSubmitted, loading} = this.state;\n    return (\n      <div className=\"App\">\n      <LoadingScreen\n          loading={loading}\n          bgColor='linear-gradient(to right, rgba(105, 187, 28, 0.9), rgba(4, 218, 218, 0.9))'\n          spinnerColor='#55f'\n          textColor='#111'\n          text='Loading....'\n          children = ''\n        > \n        </LoadingScreen>\n      {!formCompleted &&\n        <QuizForm \n          state = {this.state} \n          handleSubmit = {this.handleSubmit} \n          handleChange = {this.handleChange}\n        />\n      } \n        {formCompleted && !quizSubmitted &&\n          <QuizQuestions \n            state = {this.state} \n            captureResults = {this.captureResults} \n            toggleLoading = {this.toggleLoading}\n            handleAnswerSubmit = {this.handleAnswerSubmit}\n          />\n        }\n        {quizSubmitted &&\n          <Results  \n            state = {this.state} \n            toggleLoading = {this.toggleLoading}\n            resetState = {this.resetState}\n          />\n        }      \n      </div>\n      )\n  }\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}